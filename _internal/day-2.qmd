---
title: "Day 2"
author: "David Kane"
---

## Session 1

Start by making an R project. Note how it, by default, is placed in my `projects` folder. Note that all this only makes sense if you have done the RStudio and Code tutorial. If you haven't done this, you are hurting your classmates. Catch up by tomorrow or don't come back.

Look in the files directory. Talk about the two things that are there. Show the hidden files button. Mention that this was set by set_rstudio_settings().

Send to rooms so that everyone has this working.

## Session 2

With an empty project, create an R script. Write 2 + 2. Source the script. See the echo. Add 6 + 7. Source the script. Then do it line-by-line. 

Show how we can also execute this line directly, first by hitting the run button, and second with command-enter. Introduce the two "worlds" of data science: the document and the console. They are not the same thing!

Change 2 + 2 to x <- 2 + 2. Source. "Nothing" happens! You only see what you have done if you "dump" it out in the document. No "output" if you typed it into the console means no "output" if you do it in a document.

Show how x shows up in the environment. Restart R. x is gone!

Send them to the rooms. Practice everything that I have just showed you!

## Session 3

Bring people back. Console:

library(tidyverse) # Or tibble will print ugly.
library(primer.data)
connectedness

Just look at the data. Interesting. Console:

summary(connectedness)

Cool.

Script:

summary(connectedness)

Works from there too. Source it. Works OK. But restart R and it doesn't work!

Review the distinction between what happens in the document and what happens in the environment. Execute the data loading code. Now summary(x) works! Restart R. Note how x disappears from the environment. Rendering the document still works! But summary(x) does not.

Focus on the short cut key command-enter (for working with code line-by-line).

Need to show link to NYT article somehow.

Script:

library(primer.data) 
library(tidyverse)


Note all the garbage which this is producing! The document is ugly. There are two problems: we don't want to see the code and we don't want to see junky output. Wonder how we might get rid of these? In the meantime, just do what I have done here.

Send them to the breakout rooms to replicate these. Explore the data!

## Session 4

Make sure that students have been exposed to the concept of a pipe and to the core dplyr functions. This should be done in the Introduction tutorial for R4DS.

You can never restart R (not RStudio) too often.

In your script, start looking at the data. What is the 3rd largest (by population) county in the US? Which county has the worst economic connectedness?

connectedness |> 
  arrange(desc(population))

connectedness |> 
  arrange(connectedness)
  
Hmm. Note the danger of connectedness being the name of the tibble and the name of the variable?  

Any guesses as to the makeup of those counties? Check the data. Does it make sense?

## Session 5

Let's make a histogram of population. Goal is to copy/paste a copy of your plot into the Discord class-work channel. Example code:

Maybe we should leave out drop_na and just deal with and/or ignore and/or discuss the warning.

Make sure that things like bins and scale_x_log10 are covered in the Data visualization chapter.


```{r}
connectedness |> 
  drop_na() |> 
  ggplot(aes(x = population)) +
    geom_histogram(bins = 100) +
    scale_x_log10(labels = scales::comma_format()) +
    labs(title = "US County Populations in 2018",
         subtitle = "Populations are highly skewed",
         x = "Population",
         y = "Number of Counties",
         caption = "Opportunity Insights")
```

Make sure to start plotting exercise with at least 20 minutes left in class.

