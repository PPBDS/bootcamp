---
title: "Day 4"
author: "David Kane"
---



## Overview

Key question to answer this week: Is there a relationship between the total population of a state and the average economic connectedness of counties in that state?

Core purpose of this week is to get comfortable using our tools to answer simple data science questions. We want students to be comfortable with R/RStudio/Git/Github/Quarto. 

For today, we are getting more comfortable with the Terminal and with file locations on our machines. A key problem is that many/most students will not have done the Terminal tutorial before class today, even though they were supposed to. We should use this fact as an occasion to shame students into staying up-to-date with the work. Slacking is not fair to their classmates!

By end of class, we should have the data downloaded.

## Session 1

Don't forget to do things in the class organization repo, not your personal one.

Start with a Github repo, named class-yyyy-mm-dd. Make sure it is public. Add a README. Connect it to RStudio.  

Check out the Git window. Note the nagging. 

Edit the .gitignore but with *Rproj. Wild cards are handy! Note that the file name is red and has an asterisk, because we have not saved it. Show how nothing changes in the Git window until we save the file. Once we save it, the nagging about the Rproj ends, but we still need to commit .gitignore. Then we push.

Send to rooms to create. If you succeeded while I was demonstrating, that is OK! Now help your classmates.

## Session 2

Go to: https://github.com/PPBDS/primer.data/blob/master/data-raw/social_capital_county.csv Click on the download button to the right of the Raw button. Where is it now? Every computer is different! For most of you, there should be a Downloads folder in which ec.rds has been placed.

ls ~/Downloads
ls ~/Download/soc*

The second is useful if you have a lot of items in your Downloads folder.

Note that you need different commands on Windows.

But where will we place the file? We might just stick it in the top-level of our project. That is fine for simple projects. But for anything more complex, we want organization, which generally means a "data" directory, although you can call it what you want.

pwd
ls
ls -a   
mdkir data
mv ~/Downloads/social_capital_county.csv data/

Of course, you could do this by hand, with point-and-click and drag-and-drop. That is OK with one file. But not with 1,000!

Once it is there, note that we have some more nagging from the Git pane. We could update .gitignore. Or we might just check in the file. Data is trickier than text files. Discuss how we might include it in .gitignore if it were more than 100 mb. Large data sets are tricky! Add it to .gitignore. Maybe document where we got it from in the README.

Go to rooms and get the data into your projects. Help your friends.

## Session 3

Start a new Quarto document. Render it. Get rid of the junk. 

Add library(tidyverse).  Add in a label code option. Render and see how the set-up label is shown during knitting.

```{r}
#| output: false
#| echo: false
#| label: set-up
library(tidyverse)
```

Back to rooms. Make sure everyone has done this. Start thinking about a plot. Did everyone do the necessary git steps? If your work isn't pushed, then you are not a professional.

What about the code in which we read in the data. Do that first!

## Session 4

Impossible to get this far. But here is the code for the graphic, in case you want to add it to the class-work. channel. 

Explain the distinction between just vomitting output right into the document (as we do here) and first assigning it to an object and then printing that output. Neither approach is always right! But, in general, we use the first approach when creating our plots. It is so handy!

```{r}
#| echo: false
#| label: make plot

library(primer.data)
connectedness |> 
  drop_na() |> 
  mutate(state = str_replace(location, ".*, ", "")) |> 
  summarise(pop_state = sum(population),
            avg_ec = mean(connectedness),
            .by = state) |> 
  ggplot(aes(x = pop_state, y = avg_ec)) +
    geom_point() +
    geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +
    scale_x_log10(breaks = c(1000000, 10000000),
                  labels = scales::comma_format()) +
    labs(y = "Average County Economic Connectedness",
         x = "State Population",
         title = "Economic Connectedness and Population in US States",
         subtitle = "Biggger states have counties with lower average economic connectedness.")
```

If there is time, consider assiging the plot to an object and then printing that object. If there is a lot of time (there won't be), consider saving the plot to permanent object and then loading that object. Note the Git implications of this approach. Mention that a script would be the natural tool for this approach, and that is especially useful if the plot takes a long time to build.

How might we make the plot so that there was a different panel for each state?





