---
title: "Day 9"
execute: 
  echo: false
---

Let's explore some weather data. I really like this NYT [article](https://www.nytimes.com/interactive/2021/06/29/upshot/portland-seattle-vancouver-weather.html) and the associated plot:

```{r}
knitr::include_graphics("data/seattle-temps.png")
```

Which we will replicate (and update) like so:

```{r}
#| message: false
library(tidyverse)
library(worldmet)
```


```{r}
#| message: false
#| cache: true

x <- importNOAA(code = "727935-24234", 
                year = 1979:2025,
                hourly = FALSE) 
```


```{r}
daily_max <- x %>%
  mutate(
    date_only = as.Date(date),
    temp_f = air_temp * 9/5 + 32,  # Convert Celsius to Fahrenheit
    year = year(date),
    month = month(date),
    day = day(date)
  ) %>%
  # Filter out NA temperatures before grouping
  filter(!is.na(temp_f)) %>%
  group_by(date_only, year, month, day) %>%
  summarise(
    tmax_f = max(temp_f),  # No need for na.rm since we filtered NAs
    n_obs = n(),  # Count of observations per day
    .groups = 'drop'
  ) %>%
  mutate(
    day_of_year = yday(date_only)
  )
```

```{r}
ggplot(daily_max, aes(x = day_of_year, y = tmax_f)) +
 geom_point(alpha = 0.3, size = 0.5, color = "gray60") +
 scale_x_continuous(
   breaks = c(1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335),
   labels = c("Jan.", "Feb.", "March", "April", "May", "June",
              "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec.")
 ) +
 scale_y_continuous(
   limits = c(20, 120),
   breaks = seq(20, 120, by = 20)
 ) +
 labs(
   title = "Daily maximum temperatures in Seattle, 1979-2025",
   x = "",
   y = "deg. Fahrenheit"
 ) +
 theme_minimal() +
 theme(
   panel.grid.minor = element_blank(),
   axis.text = element_text(size = 10)
 )
```

Could make this plot nicer, or at least more like the NYT. Could also make it different. What about a smoothed line for each year. 50 lines might show an interesting pattern.

## Questions Which I Asked AI

Interspersed with some comments for your info.

````
I am using the worldmet package in R. How can I gather the data to make a plot like this?
````

Note that rnoaa, a formerly popular package, is deprecated. I think that worldmet is good. Note that it will produce a map to help you find the location code you want for the city you give it. This is useful, especially since it shows the code you need --- something like `727935-24234` --- and indicates how far back the data goes.

````
How about worldmet package since rnoaa seems deprecated?
````

Encourage students to pick different cities from me, but it is useful for the whole breakout room to use the same city. Not a requirement though!

Note that the data download can take some time. This means that, immediately, you either want to move that data download code into a separate script, which saves out an RDS object, or you want to set `cache = TRUE` in the code chunk.

````
Here is the data:

x

Obviously, I need to calculate a high for each day. I also need a new day-of-the-year variable to make the plotting easier.
````

worldmet data comes out hourly.

Note that the code you get might be confusing, depending on how it deals with missing values. Have the AI write the code but then you look at the code!

````
daily_max
..

Plot for graphic. Just do a basic version first, using ggplot()
````

Show the data to the AI at each step. Asking for a simple version first is often very helpful.


## Session 1

Start up a data science project! That means, a new Github repo, connected to a new project on your computer.
Since we are making a website, we also do `quarto create project website .`

Note that that command gives us the `.gitginore`. Without it, we would need to create by hand.

At some point, we need to add `_site` to the `.gitignore`.

Not too early to think about organization.

## Session 2

Remind yourself, from the tutorial, what the files mean/do. Preview the website:

quarto preview

Make sure this works for everyone in your group. 

Start editing the index.qmd.

Ask the AI. Even better, do like I do! Ask multiple AIs!

## Session 3

Cold call: Tell me about another project in your group.

Edit the index.qmd to load some libraries and download the data. Looks at the data! Poke around! Start thinking about a plot.

If the download takes some time, move it to a script, like I did last class and like you have seen in the Positron websites tutorials.

Note the "path" argument to importNOAA. Very handy! Also, the downloaded data should not be on GitHub, so we need to add the name of the file to `.gitignore`.

## Session 4

If the plot doesn't look good. Tell AI what to change.

Once the plot starts looking good, consider organizing things a bit better, as we did in the Quarto Websites tutorial. Perhaps clean_data.R script. Perhaps a make_graphic.R script. Maybe index.qmd only loads an image.

Maybe make a very different plot, an interactive one which shows the dates when you click on a point. Challenger your stronger students to use gganimate to make an animation. Lot's of possibilities.

Clean up about.qmd.

## Session 5

Publish your website with:

quarto publish gh-pages

Make sure this works for everyone in your room.

## Session 6

Clean up your website.

0) Put your download data in a script and just do it once.

1) Make your plot nicer. There is obviously a lot that one might do.

2) Clean up the about.qmd, the title, and so on.


