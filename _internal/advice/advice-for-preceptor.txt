
## Class Preparation

* Identify one or more head TFs, and also some Senior TFs.

* Seek TF volunteers.

* Set up new google account: month.YYYY.kdsb.

* New Google form in new account.

* New Github organization: bootcamp-yyyy-mm

* Check the old bootcamp server. Just use it again.

* Sign up for Zoom which has enough slots of students. Can wait until enrollment firms up.

* Consider switching weeks 5 and 6. The data for 6 supplies few (and simple) covariates. So, you can only use a very simple model. THe data for 5 is richer.

* Convert weeks 5, 6 and 7 to new process. One answer file for each day, with the questions bunched together in paragraphs. Each day, take the answer file, strip away the answers, then upload the new qmd to a new repo. Students then fork that repo to start the day.

## Enrollment

* Start registration process three weeks before course starts. After a week, let people know that registration ends in a week, a week before class starts. Close registration a week ahead. Of course, you can let in, by hand, some extra students, but the sooner you nail down the students, the better.

* Require submission of the "Tutorials with Positron" tutorial in order to "register" for the class. This guarantees that you will have a spot, but you still need to do all the work. 

* Inform about the survey and the homework for class 1 at the same time you close registration, which is the Monday before.

* On Wednesday, email them a link to the class survey which includes, full name, email (to use for assignments), age, birth country, city/country from where you will take the course, programming experience (either zero or some). Tell them they have 24 hours to complete the (trivial!) survey, or you reserve the right to remove them from the class. The big advantage of this is that the vast majority will do the survey, allowing the head TF to get going on the 

* Require submission of the "Introduction" and "01-code" tutorial in order to get a Zoom link for the first class. Require this be submitted by Sunday at midnight.

* Think harder about the questions in the survey. I forgot to ask about sex this time, as well as: Is there anyone you want to work with.

* Spend Monday getting the class list organized. Need to put students into 
breakout rooms and assign rooms to TFs. Details will depend on # of students 
and of TFs. 



* Solicit email from "special" students who should be grouped together. 
Two common examples are younger ones (<=14) and older ones (>22). Put these 
together in separate groups.

* Create a new location for example reprexes at Posit Community for the Getting 
Help tutorial. Here is the most recent one: 
https://forum.posit.co/t/thread-for-students-posting-practice-reprexes-please-do-not-answer-them/196503

* Update Getting Help tutorial links.

* Set up class list and cold_call function.

* Set up empty project for first class so your set up looks like student set up.

* Setup Excel spreadsheet for Data and Model Projects.

This document provides an overview of the course --- its structure, schedule and
philosophy. 

## Empower the TFs

The more power and responsibility the TFs have, the better. But then we are required to build tools which empower them. Examples:

1) Given a list of their students' emails, it should be easy for TFs to determine which of their students have submitted which of the homework assignments. Pass in one student email and you get a list of their completed assignments.

2) Given a specific tutorial, a list of their students' emails and a list of code chunk names, it should be easy for TFs to get a list of all the students and their answers to all the specified questions in a given tutorial.

3) Would be super cool if TFs could press a button, and then get a browser, with a tab showing the url for each of their student's URL submissions in a given homework. We need to make it easier for TFs to check student work.



## Next Time

* Require students show up 10 minutes ahead of Demo Day. They then confirm attendance in the room assignment spreadsheet. Anyone who doesn't by T-5 minutes is deleted from the list. The TF in charge of each room group can then re-arrange things to make up for the absence.


* Add a tidytext tutorial, if only to set the groundwork for a class exercise 
in week 3.

* Standardize (either in a tutorial or as a spreadsheet) students submitting 
their data project ideas (and a URL) before class #7.


## Key Ideas

* Make stuff. Each week (and many individual classes) ends with the 
construction of something cool.

* Present stuff. Have a public presentation every four weeks.

* Professional tools.

* Use AI.

* Keep careful track of students in the course. There is one spreadsheet in 
which the head TF keeps track of students in the class.

## Zoom Issues

The business license allows for 300 users, which is mostly enough. The large meeting licence would give us 500, or more.

When using breakout rooms, just pick the option that allows people to move 
wherever they want. No need to pre-assign or grant co-host status, I think.

## Running the Class

* Class is organized by week. What do we want to accomplish by the end of the 
week? The goal will always be a completed project, published to Github Pages.

* We have a target goal for each day, but we also have "extra" work/questions 
which we can use to challenge students who are going too fast. We never want 
students on Monday to start doing the work for Wednesday's class. All students 
start Wednesday's class from the same starting line.

* Good extra/work questions are written ahead of time and, perhaps, included in 
the Preceptor Notes.



* Finally, we distribute after class the repo (again) and the published answer page.

## Schedule

### Weeks 1-3

See the individual `days` QMD files.  

### Week 4: Data Projects

Need to think more about the best way to spend M/W of this week. Certainly 
want to have, for Monday, a rough draft of room assignments. Spend time 
looking at projects within the breakout rooms, especially since students 
don't see their breakout room peers' projects on Demo Day.

### Weeks 5-7

The class material for weeks 5 through 7 is already (mostly) created. Recall that we do Wisdom/Justice on Monday, Courage on Wednesday, and then finish with Temperance on Thursday. We have already prepared the "answers" QMD for each day. (These should probably be renamed, using the main topic, like "STAR" or "resumes," in place of the week number. And we might consider switching the material for weeks 6 and 5 since the STAR data only really allows for a very simple model. At the least, we need to revisit the data.)

* Confirm that the answer QMD for that day looks good. In general, we post this as a rendered HTML after class is over so that students can review.

* Save the answer QMD as a new file, often called something like STAR-courage.qmd. Delete all the answers that we don't want students to see.

* Create a new repo in the bootcamp organization, often called something like STAR-courage-repo. Upload STAR-courage.qmd to this repo. In class, have students fork this repo and then download to their computers. 

* This is somewhat messy in the sense that students end up with three repos for one project, constructed over the course of the week. But it seems like weaker students need this structure. 

* Stronger students can be instructed to (or challenged to) not fork at all. Instead, they can have one repo and then copy/paste code from the QMD in our repos as needed. 

* After class, the answers QMD is uploaded to STAR-courage-repo. We then `quarto publish gh-pagaes STAR-courage-answers.qmd. 

### Week 8: Model Projects

Focus is the model project presentations on Thursday.




